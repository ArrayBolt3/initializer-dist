#!/bin/bash

## This file is part of Whonix.
## Copyright (C) 2012 - 2014 Patrick Schleizer <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

set -x
set -o pipefail

error_handler() {
   true "\
###########################################################
## chroot script: ERROR detected. Please report this bug! #
###########################################################"

   exit 1
}

## {{ Set up error handler.
if [ "$(type -t error_handler_general)" = "function" ]; then
   ## Function error_handler_general exists (declared in
   ## help-steps/pre). Prefer to use the more feature rich version of the error
   ## handler.
   trap "error_handler_general" ERR
else
   ## Function error_handler_general does not exist. Script
   ## runs standalone outside the build script. Fall back to a simpler error
   ## handler.
   trap "error_handler" ERR
fi
## }}

own_filename="$(basename "$BASH_SOURCE")"
for skip_script in $SKIP_SCRIPTS; do
   if [ "$skip_script" = "$own_filename" ]; then
      true "INFO: Skipping $own_filename, because SKIP_SCRIPTS includes it."
      exit 0
   fi
done
unset skip_script

## Enable apt-cacher-ng proxy.
if [ "$(type -t apt_cache_maybe_enable)" = "function" ]; then
   apt_cache_maybe_enable
fi

## {{{ variables

DPKG_MAINTSCRIPT_PACKAGE_BACKUP="$DPKG_MAINTSCRIPT_PACKAGE"
DPKG_RUNNING_VERSION_BACKUP="$DPKG_RUNNING_VERSION"
DPKG_ADMINDIR_BACKUP="$DPKG_ADMINDIR"
DPKG_NO_TSTP_BACKUP="$DPKG_NO_TSTP"
DPKG_MAINTSCRIPT_ARCH_BACKUP="$DPKG_MAINTSCRIPT_ARCH"

if [ "$DPKG_RUNNING_VERSION" = "" ]; then
   DPKG_RUNNING_VERSION="$(dpkg-query --show --showformat='${Version}' "dpkg")"
   export DPKG_RUNNING_VERSION
fi

if [ "$DPKG_ADMINDIR" = "" ]; then
   export DPKG_ADMINDIR="/var/lib/dpkg"
fi

if [ "$DPKG_NO_TSTP" = "" ]; then
   export DPKG_NO_TSTP="yes"
fi

## }}}

declare -A -g downloaded

download_package() {
   ## {{ Set up error handler.
if [ "$(type -t error_handler_general)" = "function" ]; then
   ## Function error_handler_general exists (declared in
   ## help-steps/pre). Prefer to use the more feature rich version of the error
   ## handler.
   trap "error_handler_general" ERR
else
   ## Function error_handler_general does not exist. Script
   ## runs standalone outside the build script. Fall back to a simpler error
   ## handler.
   trap "error_handler" ERR
fi
## }}
   local package="$1"
   if [ "${downloaded[$package]}" = "1" ]; then
      true "INFO: Already downloaded $package."
   elif [ "${downloaded[$package]}" = "0" ]; then
      true "INFO: Download of $package already failed earlier."
   else
      true "INFO: Downloading $package..."
      local apt_get_download_exit_code="0"
      apt-get $apt_sourcelist_empty $apt_sourceparts $apt_timeout_opts $apt_verify_opts download "$package" || { apt_get_download_exit_code="$?" ; true; };
      if [ "$apt_get_download_exit_code" = "0" ]; then
         downloaded[$package]="1"
      else
         downloaded[$package]="0"
         local MSG="ERROR: Download of $package failed. (apt_get_download_exit_code: $apt_get_download_exit_code)"
         true "$MSG"
         error "$MSG"
      fi
   fi
}

maybe_rm() {
   ## {{ Set up error handler.
if [ "$(type -t error_handler_general)" = "function" ]; then
   ## Function error_handler_general exists (declared in
   ## help-steps/pre). Prefer to use the more feature rich version of the error
   ## handler.
   trap "error_handler_general" ERR
else
   ## Function error_handler_general does not exist. Script
   ## runs standalone outside the build script. Fall back to a simpler error
   ## handler.
   trap "error_handler" ERR
fi
## }}

   if [ "$whonix_build_script_skip_verifiable" = "1" ]; then
      true "INFO: whonix_build_script_skip_verifiable is set to 1, skipping rm $1, ok."
   else
      rm --force ${1+"$@"}
   fi
}

maybe_run() {
   ## {{ Set up error handler.
if [ "$(type -t error_handler_general)" = "function" ]; then
   ## Function error_handler_general exists (declared in
   ## help-steps/pre). Prefer to use the more feature rich version of the error
   ## handler.
   trap "error_handler_general" ERR
else
   ## Function error_handler_general does not exist. Script
   ## runs standalone outside the build script. Fall back to a simpler error
   ## handler.
   trap "error_handler" ERR
fi
## }}

   if [ "$whonix_build_script_skip_verifiable" = "1" ]; then
      true "INFO: whonix_build_script_skip_verifiable is set to 1, skipping maybe_run $1, ok."
      return 0
   fi

   local script basename_script package
   shopt -s nullglob dotglob

   for script in $1.prerm; do
      basename_script="$(basename "$script")"
      ## Example basename_script:
      ## libc6:i386.prerm
      ## libgdk-pixbuf2.0-0:i386.postrm
      ## libgdk-pixbuf2.0-0.postrm
      basename_script_without_extension="${basename_script%.*}"
      ## Example basename_script_without_extension:
      ## libgdk-pixbuf2.0-0:i386
      ## libgdk-pixbuf2.0-0
      package="$basename_script_without_extension"
      if [ ! -e "$script" ]; then
         true "INFO: $script does not exist."
      elif [ ! -x "$script" ]; then
         true "INFO: $script not executable."
      else
         download_package "$package"
         if [ "${downloaded[$package]}" = "1" ]; then
            true "INFO: Running... $script remove"
            export DPKG_MAINTSCRIPT_PACKAGE="$package"
            ## TODO: export DPKG_MAINTSCRIPT_ARCH="?"
            export DPKG_MAINTSCRIPT_NAME="prerm"
            ## Example:
            ## /var/lib/dpkg/info/fontconfig.prerm remove
            "$script" remove
         else
            true "WARNING: Skipping running $script remove, because $package could not be downloaded. This will likely break the verifiable builds feature."
         fi
      fi
   done

   unset script basename_script package DPKG_MAINTSCRIPT_PACKAGE DPKG_MAINTSCRIPT_NAME

   for script in $1.postrm; do
      basename_script="$(basename "$script")"
      basename_script_without_extension="${basename_script%.*}"
      package="$basename_script_without_extension"
      if [ ! -e "$script" ]; then
         true "INFO: $script does not exist."
      elif [ ! -x "$script" ]; then
         true "INFO: $script not executable."
      else
         download_package "$package"
         if [ "${downloaded[$package]}" = "1" ]; then
            export DPKG_MAINTSCRIPT_PACKAGE="$package"
            ## TODO: export DPKG_MAINTSCRIPT_ARCH="?"
            export DPKG_MAINTSCRIPT_NAME="postrm"
            true "INFO: Running... $script purge"
            ## Example:
            ## /var/lib/dpkg/info/fontconfig.postrm purge
            "$script" purge
         else
            true "WARNING: Skipping running $script purge, because $package could not be downloaded. This will likely break the verifiable builds feature."
         fi
      fi
   done

   unset script basename_script package DPKG_MAINTSCRIPT_PACKAGE DPKG_MAINTSCRIPT_NAME

   shopt -u nullglob dotglob
}

echo "INFO: Cleaning up..."

mkdir --parents "/var/lib/whonix/initial-packages"
## This is important for the download_package function.
cd "/var/lib/whonix/initial-packages"

## non-deterministic [1]
## /var/cache/fontconfig
## does not exist: /var/lib/dpkg/info/fontconfig.prerm remove
maybe_run "/var/lib/dpkg/info/fontconfig"

## non-deterministic [2]
## /var/cache/ldconfig/aux-cache
maybe_run "/var/lib/dpkg/info/libc6*"
maybe_rm /var/cache/ldconfig/aux-cache

## non-deterministic [3]
## /var/cache/man folder
maybe_run "/var/lib/dpkg/info/man-db"

## non-deterministic [14]
## /etc/xml/docbook-xsl.xml
## /var/lib/xml-core/docbook-xsl
maybe_run "/var/lib/dpkg/info/docbook-xsl"

## non-deterministic [7]
## /etc/xml/docbook-xml.xml
## /etc/xml/docbook-xml.xml.old
maybe_run "/var/lib/dpkg/info/docbook-xml"

## non-deterministic [5]
## /etc/xml/sgml-data
## /etc/xml/sgml-data.old
maybe_run "/var/lib/dpkg/info/sgml-data"

## non-deterministic [6]
## /var/lib/sgml-base/supercatalog
## /var/lib/sgml-base/supercatalog.old
maybe_run "/var/lib/dpkg/info/sgml-base"

## non-deterministic [4]
## /var/lib/xml-core folder
## /etc/xml/catalog
## /etc/xml/catalog.old
## /etc/xml/xml-core.xml
## /etc/xml/xml-core.xml.old
maybe_run "/var/lib/dpkg/info/xml-core"

## non-deterministic [8]
## There is no postrm script for the base-files package.
maybe_rm /usr/share/info/dir
maybe_rm /usr/share/info/dir.old ## no regeneration, since not required

## non-deterministic [9]
## /usr/lib/*/gdk-pixbuf*/*/loaders.cache
## ex: /usr/lib/i386-linux-gnu/gdk-pixbuf-2.0/2.10.0/loaders.cache
maybe_run "/var/lib/dpkg/info/libgdk-pixbuf*"

## non-deterministic [10]
## /usr/lib/i386-linux-gnu/gio/modules/giomodule.cache
## TODO: fix dpkg-trigger error, remove || true
true "INFO: TODO, fix dpkg-trigger error."
maybe_run "/var/lib/dpkg/info/libglib*" || true
true "INFO: The dpkg-trigger error was expected."

## non-deterministic [11]
## /usr/lib/i386-linux-gnu/*/*/immodules.cache
## /usr/lib/i386-linux-gnu/gtk-2.0/2.10.0/immodules.cache
## /usr/lib/i386-linux-gnu/gtk-3.0/3.0.0/immodules.cache
maybe_run "/var/lib/dpkg/info/libgtk*"

## non-deterministic [12]
## some /usr/lib/pymodules/python2.7/**/__init__.pyc
## does not exist: /var/lib/dpkg/info/python-support
maybe_run "/var/lib/dpkg/info/python-support"

## non-deterministic [13]
## /var/lib/gconf/defaults/%gconf-tree.xml
maybe_run "/var/lib/dpkg/info/gconf2-common"

## non-deterministic [20]
## /var/cache/debconf/config.dat
## Only required for Debian Wheezy, not required on Debian Jessie?
## debconf's prerm script does not delete /var/cache/debconf/* and there is no
## postrm script. Therefore we manually delete files in that folder.
## No longer doing this, since it causes many issues. Such as.
## When you run:
##     sudo dpkg-reconfigure console-data
## and select
##    select select keymap from archlist
## then it says
##    Looking for keymap to install: NONE
#maybe_run "/var/lib/dpkg/info/debconf"
#maybe_rm /var/cache/debconf/*

## Kill dhclient3 to prevent rewrite of /var/lib/dhcp/*.
killall dhclient3 || true
## There are .leases.
rm /var/lib/dhcp/*.leases || true
## And there are .lease.
rm /var/lib/dhcp/*.lease || true
## We are best of deleting the whole folder.
rm -r /var/lib/dhcp/* || true

## Cleanup.
## || true to support re-running the script.
apt-get --yes autoremove --purge || true

## Get rid of /var/cache/apt/pkgcache.bin. (non-deterministic)
## || true to support re-running the script.
apt-get --yes clean || true

## No longer deleting /var/lib/tor. We install but forbid to run software such as Tor we install.
## Therefore /var/lib/tor should be empty.
## Ensure to delete /var/lib/tor. It contains sensitive stuff like the Tor consensus and the Tor entry guards.
## rm -r /var/lib/tor/* || true

## Delete logs and other stuff.
rm -r /tmp/* || true
rm /var/log/installer/* || true
rm -r /var/cache/apt/* || true
rm -r /var/lib/apt/lists/* || true
rm -r /var/log/installer || true
rm /var/lib/dpkg/*-old || true
rm /var/cache/debconf/*-old || true
## Erase rotated logs (usually wont appear unless you left your VM running for several days).
rm /var/log/*.[0-9] || true
rm /var/log/*.[0-9].gz || true

## non-deterministic [0]
## /var/lib/dpkg/available
## /var/lib/dpkg/available-old
dpkg --clear-avail
maybe_rm /var/lib/dpkg/available-old

## non-deterministic [14]
## /etc/init.d/.depend.boot
## /etc/init.d/.depend.start
## /etc/init.d/.depend.stop
## Recreate those and therefore hopefully come up with deterministic results.
##
## Only attempt to run `insserv` when it's installed. This ensures, that this
## works on CI systems (Ubuntu) and in modified Whonix versions as well.
if [ -x /sbin/insserv ]; then
   /sbin/insserv --showall
   /sbin/insserv --verbose
fi

## non-deterministic [15]
## /var/lib/urandom/random-seed
## This is no longer required for Debian Jessie?
## Not using maybe_rm, this should always be deleted for security reasons.
rm --force /var/lib/urandom/random-seed

## non-deterministic [16]
## /etc/blkid.tab
## Although man blkid says /etc/blkid.tab is a cache file (and therefore should
## be rather in /var/cache) for historical reasons it is in /etc. Should be
## dispensable. (Gets automatically recreated if necessary.)
## This is no longer required for Debian Jessie?
maybe_rm /etc/blkid.tab
maybe_rm /etc/blkid.tab.old

## non-deterministic [17]
## /etc/apt/trustdb.gpg
## Thanks to:
## https://unix.stackexchange.com/questions/110500/how-to-regenerate-etc-apt-trustdb-gpg-on-debian
## This is no longer required for Debian Jessie?
maybe_rm /etc/apt/trustdb.gpg

## non-deterministic [19]
## /etc/debootstrap/config
## grml-debootstrap copied that file into the build folder. Since
## grml-debootstrap does
## "sed -i "s#TARGET=.*#TARGET=\"$TARGET\"#" $MNTPOINT/etc/debootstrap/config"
## this file may be non-deterministic. Deleting it is safe, because
## is not owned by grml-debootstrap (using "dpkg -S /etc/debootstrap/config"),
## because grml-debootstrap does not get installed and because it only contains
## comments. Maybe not necessary on Debian Jessie for some reason.
maybe_rm /etc/debootstrap/config

## non-deterministic [21]
## Only required when using the anon-shared-build-inst-tb chroot-post.d script.
## No need to manually re-create it.
## Gets automatically re-created on next run of tb-updater.
## This is no longer required for Debian Jessie?
rm -r /home/user/.tb/gpgtmpdir || true

## Truncate all log files, keeping user groups and permissions.
find /var/log -type f -exec cp /dev/null {} \;

## Disable apt-cacher-ng proxy.
unset http_proxy

## This will not work in chroot.
## Take care of development leaks and make resulting ova image smaller.
## Since VBox export works below the FS level it will keep deleted files (and the ova will stay large).
## This also ensure that possible leaks we deleted before are really deleted.
#echo "INFO: Wiping free space. This can take a while."
## TODO CHROOT #dd if=/dev/zero of=/zerofile bs=1024 || true

## Flush the zero-file to disk before removing it.
sync

## Delete the zero-file.
rm /zerofile || true

## Flush again after rm.
sync

## Delete bash history.
rm "/home/$user_name/.bash_history" || true
history -c || true

sync

## Explicitly "exit 0", so eventually trapped errors can be ignored.
exit 0
